{"ast":null,"code":"var _jsxFileName = \"/home/omar/codi/final/front/src/components/session/SessionProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SessionContext from \"./SessionContext\";\nimport { setCookie, getCookie, removeCookie } from \"../../cookies\";\nimport { toast } from \"react-toastify\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SessionProvider({\n  children\n}) {\n  _s();\n\n  let id = getCookie(\"id\");\n  let token = getCookie(\"token\");\n  const [loggedin, setLoggedin] = useState(false);\n  const [session, setValue] = useState({\n    user: {\n      token: getCookie(\"token\")\n    }\n  });\n  useEffect(() => {\n    function initializeSession() {\n      if (token) fetch(`http://127.0.0.1:8000/api/user`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(res => res.json()).then(res => {\n        if (!res) {\n          removeCookie(\"token\");\n          removeCookie(\"id\");\n        }\n\n        let user = { ...res,\n          token\n        };\n        setLoggedin(true);\n        updateSession({\n          user\n        });\n      });\n    }\n\n    initializeSession();\n  }, [token]);\n\n  function updateSession(nextSession) {\n    let value = typeof nextSession === \"function\" ? nextSession : prevSession => ({ ...prevSession,\n      ...nextSession\n    });\n    setValue(value);\n  }\n\n  async function login({\n    email,\n    password\n  }) {\n    // try to login\n    let {\n      error,\n      id = 4,\n      token\n    } = await fetch(\"http://127.0.0.1:8000/api/login\", {\n      method: \"post\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => res.json()); // return from the function if you have an error\n\n    if (error || !token) return toast.error(error); // get the data of the loggedin user\n\n    setCookie(\"token\", token);\n    setCookie(\"id\", id);\n    let result = await fetch(`http://127.0.0.1:8000/api/user`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => res.json());\n    let user = { ...result,\n      token\n    };\n    updateSession({\n      user\n    }); // toast(`Welcome ${user.name}!`);\n  }\n\n  function logout() {\n    setLoggedin(false);\n    updateSession({\n      user: {\n        token: null\n      }\n    });\n    removeCookie(\"id\");\n    removeCookie(\"token\");\n  }\n\n  function register(email, username, password) {\n    console.log(email, username, password);\n    axios.patch;\n  }\n\n  const context = {\n    session,\n    actions: {\n      login,\n      logout,\n      register,\n      loggedin\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n    value: context,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SessionProvider, \"rYf7Kf2WVdAbxXoBPWIzinKWAUQ=\");\n\n_c = SessionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"sources":["/home/omar/codi/final/front/src/components/session/SessionProvider.js"],"names":["React","useState","useEffect","SessionContext","setCookie","getCookie","removeCookie","toast","axios","SessionProvider","children","id","token","loggedin","setLoggedin","session","setValue","user","initializeSession","fetch","headers","Authorization","then","res","json","updateSession","nextSession","value","prevSession","login","email","password","error","method","body","JSON","stringify","result","logout","register","username","console","log","patch","context","actions"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,YAA/B,QAAmD,eAAnD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAuC;AAAA;;AACpD,MAAIC,EAAE,GAAGN,SAAS,CAAC,IAAD,CAAlB;AACA,MAAIO,KAAK,GAAGP,SAAS,CAAC,OAAD,CAArB;AACA,QAAM,CAACQ,QAAD,EAAUC,WAAV,IAAuBb,QAAQ,CAAC,KAAD,CAArC;AACA,QAAM,CAACc,OAAD,EAAUC,QAAV,IAAsBf,QAAQ,CAAC;AACnCgB,IAAAA,IAAI,EAAE;AACJL,MAAAA,KAAK,EAAEP,SAAS,CAAC,OAAD;AADZ;AAD6B,GAAD,CAApC;AAMAH,EAAAA,SAAS,CAAC,MAAM;AAEd,aAASgB,iBAAT,GAA6B;AAG3B,UAAIN,KAAJ,EACEO,KAAK,CAAE,gCAAF,EAAmC;AACtCC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAG,UAAST,KAAM;AADxB;AAD6B,OAAnC,CAAL,CAKGU,IALH,CAKSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EALjB,EAMGF,IANH,CAMSC,GAAD,IAAS;AACb,YAAI,CAACA,GAAL,EAAU;AACNjB,UAAAA,YAAY,CAAC,OAAD,CAAZ;AACAA,UAAAA,YAAY,CAAC,IAAD,CAAZ;AAGD;;AACH,YAAIW,IAAI,GAAG,EAAE,GAAGM,GAAL;AAAUX,UAAAA;AAAV,SAAX;AACAE,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAW,QAAAA,aAAa,CAAC;AAAER,UAAAA;AAAF,SAAD,CAAb;AAED,OAjBH;AAkBH;;AACDC,IAAAA,iBAAiB;AAClB,GA1BQ,EA0BN,CAACN,KAAD,CA1BM,CAAT;;AA4BA,WAASa,aAAT,CAAuBC,WAAvB,EAAoC;AAClC,QAAIC,KAAK,GACP,OAAOD,WAAP,KAAuB,UAAvB,GACIA,WADJ,GAEKE,WAAD,KAAkB,EAAE,GAAGA,WAAL;AAAkB,SAAGF;AAArB,KAAlB,CAHN;AAIAV,IAAAA,QAAQ,CAACW,KAAD,CAAR;AACD;;AAED,iBAAeE,KAAf,CAAqB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAArB,EAA0C;AACxC;AACA,QAAI;AACFC,MAAAA,KADE;AAEFrB,MAAAA,EAAE,GAAG,CAFH;AAGFC,MAAAA;AAHE,QAIA,MAAMO,KAAK,CAAC,iCAAD,EAAoC;AACjDc,MAAAA,MAAM,EAAE,MADyC;AAEjDb,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFwC;AAKjDc,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAf;AAL2C,KAApC,CAAL,CAMPT,IANO,CAMDC,GAAD,IAASA,GAAG,CAACC,IAAJ,EANP,CAJV,CAFwC,CAcxC;;AACA,QAAIQ,KAAK,IAAI,CAACpB,KAAd,EAAqB,OAAOL,KAAK,CAACyB,KAAN,CAAYA,KAAZ,CAAP,CAfmB,CAiBxC;;AACA5B,IAAAA,SAAS,CAAC,OAAD,EAAUQ,KAAV,CAAT;AACAR,IAAAA,SAAS,CAAC,IAAD,EAAOO,EAAP,CAAT;AAEA,QAAI0B,MAAM,GAAG,MAAMlB,KAAK,CAAE,gCAAF,EAAmC;AACzDC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAAST,KAAM;AADxB;AADgD,KAAnC,CAAL,CAIhBU,IAJgB,CAIVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAJE,CAAnB;AAMA,QAAIP,IAAI,GAAG,EAAE,GAAGoB,MAAL;AAAazB,MAAAA;AAAb,KAAX;AAEAa,IAAAA,aAAa,CAAC;AAAER,MAAAA;AAAF,KAAD,CAAb,CA7BwC,CA8BxC;AACD;;AAED,WAASqB,MAAT,GAAkB;AAChBxB,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAW,IAAAA,aAAa,CAAC;AAAER,MAAAA,IAAI,EAAE;AAAEL,QAAAA,KAAK,EAAE;AAAT;AAAR,KAAD,CAAb;AACAN,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAA,IAAAA,YAAY,CAAC,OAAD,CAAZ;AAED;;AACD,WAASiC,QAAT,CAAkBT,KAAlB,EAAyBU,QAAzB,EAAmCT,QAAnC,EAA6C;AAC3CU,IAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ,EAAmBU,QAAnB,EAA6BT,QAA7B;AACAvB,IAAAA,KAAK,CAACmC,KAAN;AAED;;AAED,QAAMC,OAAO,GAAG;AACd7B,IAAAA,OADc;AAEd8B,IAAAA,OAAO,EAAE;AACPhB,MAAAA,KADO;AAEPS,MAAAA,MAFO;AAGPC,MAAAA,QAHO;AAIP1B,MAAAA;AAJO;AAFK,GAAhB;AAUA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE+B,OAAhC;AAAA,cACGlC;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA3GuBD,e;;KAAAA,e","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SessionContext from \"./SessionContext\";\nimport { setCookie, getCookie, removeCookie } from \"../../cookies\";\nimport { toast } from \"react-toastify\";\nimport axios from 'axios';\n\nexport default function SessionProvider({ children }) {\n  let id = getCookie(\"id\");\n  let token = getCookie(\"token\");\n  const [loggedin,setLoggedin]=useState(false)\n  const [session, setValue] = useState({\n    user: {\n      token: getCookie(\"token\"),\n    },\n  });\n\n  useEffect(() => {\n   \n    function initializeSession() {\n      \n    \n      if (token)\n        fetch(`http://127.0.0.1:8000/api/user`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        })\n          .then((res) => res.json())\n          .then((res) => {\n            if (!res) {\n                removeCookie(\"token\");\n                removeCookie(\"id\");\n\n\n              }\n            let user = { ...res, token };\n            setLoggedin(true)\n            updateSession({ user });\n          \n          });\n    }\n    initializeSession();\n  }, [token]);\n\n  function updateSession(nextSession) {\n    let value =\n      typeof nextSession === \"function\"\n        ? nextSession\n        : (prevSession) => ({ ...prevSession, ...nextSession });\n    setValue(value);\n  }\n\n  async function login({ email, password }) {\n    // try to login\n    let {\n      error,\n      id = 4,\n      token,\n    } = await fetch(\"http://127.0.0.1:8000/api/login\", {\n      method: \"post\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    }).then((res) => res.json());\n\n    // return from the function if you have an error\n    if (error || !token) return toast.error(error);\n\n    // get the data of the loggedin user\n    setCookie(\"token\", token);\n    setCookie(\"id\", id);\n\n    let result = await fetch(`http://127.0.0.1:8000/api/user`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }).then((res) => res.json());\n\n    let user = { ...result, token };\n\n    updateSession({ user });\n    // toast(`Welcome ${user.name}!`);\n  }\n\n  function logout() {\n    setLoggedin(false)\n    updateSession({ user: { token: null } });\n    removeCookie(\"id\");\n    removeCookie(\"token\");\n\n  }\n  function register(email, username, password) {\n    console.log(email, username, password);\n    axios.patch\n    \n  }\n\n  const context = {\n    session,\n    actions: {\n      login,\n      logout,\n      register,\n      loggedin,\n    },\n  };\n\n  return (\n    <SessionContext.Provider value={context}>\n      {children}\n    </SessionContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}