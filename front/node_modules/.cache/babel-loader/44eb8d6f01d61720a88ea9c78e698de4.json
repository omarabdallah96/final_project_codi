{"ast":null,"code":"var _jsxFileName = \"/home/omar/codi/final/front/src/components/session/SessionProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SessionContext from './SessionContext';\nimport { setCookie, getCookie, removeCookie } from '../../cookies';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SessionProvider({\n  children\n}) {\n  _s();\n\n  const [session, setValue] = useState({\n    user: {\n      token: getCookie('token')\n    }\n  });\n  useEffect(() => {\n    function initializeSession() {\n      let id = getCookie('id');\n      let token = getCookie('token');\n      if (token) fetch(`http://127.0.0.1:8000/api/user`, {\n        headers: {\n          'token': token\n        }\n      }).then(res => res.json()).then(res => {\n        let user = { ...res.data,\n          token\n        };\n        updateSession({\n          user\n        });\n      });\n    }\n\n    initializeSession();\n  }, []);\n\n  function updateSession(nextSession) {\n    let value = typeof nextSession === \"function\" ? nextSession : prevSession => ({ ...prevSession,\n      ...nextSession\n    });\n    setValue(value);\n  }\n\n  async function login({\n    email,\n    password\n  }) {\n    // try to login\n    let {\n      error,\n      id = 4,\n      token\n    } = await fetch('http://127.0.0.1:8000/api/login', {\n      method: \"post\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => res.json()); // return from the function if you have an error\n\n    if (error || !token) return toast.error(error); // get the data of the loggedin user\n\n    let result = await fetch(`http://127.0.0.1:8000/api/user`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => res.json());\n    let user = { ...result.data,\n      token\n    };\n    setCookie('id', id);\n    setCookie('token', token);\n    updateSession({\n      user\n    });\n    toast(`Welcome ${user.first_name}!`);\n  }\n\n  function logout() {\n    updateSession({\n      user: {\n        token: null\n      }\n    });\n    removeCookie('id');\n    removeCookie('token');\n  }\n\n  function register(email, username, password) {\n    console.log(email, username, password);\n  }\n\n  const context = {\n    session,\n    actions: {\n      login,\n      logout,\n      register\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n    value: context,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SessionProvider, \"l5vLupsG9+pLIoeOe5vr4bMDXQc=\");\n\n_c = SessionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"sources":["/home/omar/codi/final/front/src/components/session/SessionProvider.js"],"names":["React","useState","useEffect","SessionContext","setCookie","getCookie","removeCookie","toast","SessionProvider","children","session","setValue","user","token","initializeSession","id","fetch","headers","then","res","json","data","updateSession","nextSession","value","prevSession","login","email","password","error","method","body","JSON","stringify","result","Authorization","first_name","logout","register","username","console","log","context","actions"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SessionContext from './SessionContext';\nimport { setCookie, getCookie, removeCookie } from '../../cookies';\nimport { toast } from 'react-toastify';\n\nexport default function SessionProvider({ children }) {\n\n    const [session, setValue] = useState({\n        user: {\n            token: getCookie('token')\n        }\n    });\n\n    useEffect(() => {\n        function initializeSession() {\n            let id = getCookie('id');\n            let token = getCookie('token');\n            if (token) fetch(`http://127.0.0.1:8000/api/user`, {\n                headers: {\n                    'token': token\n                }\n            }).then(res => res.json()).then(res => {\n                let user = { ...res.data, token };\n                updateSession({ user });\n            });\n        }\n        initializeSession();\n    }, []);\n\n    function updateSession(nextSession) {\n        let value = typeof nextSession === \"function\" ?\n            nextSession : prevSession => ({ ...prevSession, ...nextSession });\n        setValue(value);\n    }\n\n    async function login({ email, password }) {\n\n        // try to login\n        let { error, id = 4, token } = await fetch('http://127.0.0.1:8000/api/login', {\n            method: \"post\",\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: JSON.stringify({ email, password })\n        }).then(res => res.json());\n\n        // return from the function if you have an error\n        if (error || !token) return toast.error(error);\n\n        // get the data of the loggedin user\n        let result = await fetch(`http://127.0.0.1:8000/api/user`, {\n            headers: {\n                 Authorization: `Bearer ${token}` \n\n\n\n            }\n        }).then(res => res.json());\n\n        let user = { ...result.data, token };\n\n        setCookie('id', id);\n        setCookie('token', token);\n        updateSession({ user });\n        toast(`Welcome ${user.first_name}!`);\n    }\n\n    function logout() {\n        updateSession({ user: { token: null } });\n        removeCookie('id');\n        removeCookie('token');\n    }\n    function register(email,username,password){\n        console.log(email,username,password);\n    }\n\n    const context = {\n        session,\n        actions: {\n            login,\n            logout,register\n        }\n    }\n\n    return (\n        <SessionContext.Provider value={context}>\n            {children}\n        </SessionContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}