{"ast":null,"code":"var _jsxFileName = \"/home/omar/codi/final/front/src/components/session/SessionProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SessionContext from \"./SessionContext\";\nimport { setCookie, getCookie, removeCookie } from \"../../cookies\";\nimport { toast } from \"react-toastify\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SessionProvider({\n  children\n}) {\n  _s();\n\n  let id = getCookie(\"id\");\n  let token = getCookie(\"token\");\n  const [loggedin, setLoggedin] = useState(false);\n  const [session, setValue] = useState({\n    user: {\n      token: getCookie(\"token\")\n    }\n  });\n  useEffect(() => {\n    function initializeSession() {\n      if (token) {\n        const {\n          result\n        } = fetch(`http://127.0.0.1:8000/api/user`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        let role = result.role;\n\n        if (!result) {\n          removeCookie('token');\n          removeCookie('id');\n        }\n\n        setLoggedin(true);\n        let user = { ...result,\n          token,\n          role\n        };\n        updateSession({\n          user\n        }); // toast(`Welcome ${user.name}!`);\n      }\n    }\n\n    initializeSession();\n  }, [token]);\n\n  function updateSession(nextSession) {\n    let value = typeof nextSession === \"function\" ? nextSession : prevSession => ({ ...prevSession,\n      ...nextSession\n    });\n    setValue(value);\n  }\n\n  async function login({\n    email,\n    password\n  }) {\n    // try to login\n    let {\n      error,\n      disabled,\n      id = 4,\n      token\n    } = await fetch(\"http://127.0.0.1:8000/api/login\", {\n      method: \"post\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => res.json()); // return from the function if you have an error\n\n    if (disabled || !token) return toast.error(disabled);\n    if (error || !token) return toast.error(error); // get the data of the loggedin user\n\n    setCookie(\"token\", token);\n    setCookie(\"id\", id);\n    let result = await fetch(`http://127.0.0.1:8000/api/user`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => res.json());\n    let role = result.role;\n\n    if (!result) {\n      removeCookie('token');\n      removeCookie('id');\n    }\n\n    let user = { ...result,\n      token,\n      role\n    };\n    updateSession({\n      user\n    }); // toast(`Welcome ${user.name}!`);\n  }\n\n  function logout() {\n    setLoggedin(false);\n    updateSession({\n      user: {\n        token: null\n      }\n    });\n    removeCookie(\"id\");\n    removeCookie(\"token\");\n  }\n\n  async function register(email, username, password) {\n    let req = {\n      username: username,\n      email: email,\n      password: password,\n      role: \"user\",\n      name: \"\",\n      lastname: '',\n      status: \"active\",\n      photo: \"\",\n      address: \"lebanon\",\n      phone: \"0\"\n    };\n    console.log(req);\n    let result = await axios.post(\"http://127.0.0.1:8000/api/register\", req);\n    console.log(result); // return from the function if you have an error\n    // if (error || !token) return toast.error(error);\n  }\n\n  const context = {\n    session,\n    actions: {\n      login,\n      logout,\n      register,\n      loggedin\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n    value: context,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SessionProvider, \"rYf7Kf2WVdAbxXoBPWIzinKWAUQ=\");\n\n_c = SessionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"sources":["/home/omar/codi/final/front/src/components/session/SessionProvider.js"],"names":["React","useState","useEffect","SessionContext","setCookie","getCookie","removeCookie","toast","axios","SessionProvider","children","id","token","loggedin","setLoggedin","session","setValue","user","initializeSession","result","fetch","headers","Authorization","role","updateSession","nextSession","value","prevSession","login","email","password","error","disabled","method","body","JSON","stringify","then","res","json","logout","register","username","req","name","lastname","status","photo","address","phone","console","log","post","context","actions"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SessionContext from \"./SessionContext\";\nimport { setCookie, getCookie, removeCookie } from \"../../cookies\";\nimport { toast } from \"react-toastify\";\nimport axios from 'axios';\n\nexport default function SessionProvider({ children }) {\n  let id = getCookie(\"id\");\n  let token = getCookie(\"token\");\n  const [loggedin,setLoggedin]=useState(false)\n  const [session, setValue] = useState({\n    user: {\n      token: getCookie(\"token\"),\n    },\n  });\n\n  useEffect(() => {\n   \n    function initializeSession() {\n      \n    \n      if (token){\n\n      const {result}=  fetch(`http://127.0.0.1:8000/api/user`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        })\n\n        let role=result.role\n        if(!result){\n          removeCookie('token')\n          removeCookie('id')\n    \n        }\n    setLoggedin(true)\n        let user = { ...result, token,role };\n    \n        updateSession({ user });\n        // toast(`Welcome ${user.name}!`);\n\n\n      }\n    \n        \n    }\n    initializeSession();\n  }, [token]);\n\n  function updateSession(nextSession) {\n    let value =\n      typeof nextSession === \"function\"\n        ? nextSession\n        : (prevSession) => ({ ...prevSession, ...nextSession });\n    setValue(value);\n  }\n\n  async function login({ email, password }) {\n    // try to login\n    let {\n      error,\n      disabled,\n      id = 4,\n      token,\n    } = await fetch(\"http://127.0.0.1:8000/api/login\", {\n      method: \"post\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    }).then((res) => res.json());\n\n    // return from the function if you have an error\n    if (disabled || !token) return toast.error(disabled);\n\n    if (error || !token) return toast.error(error);\n\n\n    // get the data of the loggedin user\n    setCookie(\"token\", token);\n    setCookie(\"id\", id);\n\n    let result = await fetch(`http://127.0.0.1:8000/api/user`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }).then((res) => res.json());\n    let role=result.role\n    if(!result){\n      removeCookie('token')\n      removeCookie('id')\n\n    }\n\n    let user = { ...result, token,role };\n\n    updateSession({ user });\n    // toast(`Welcome ${user.name}!`);\n  }\n\n  function logout() {\n    setLoggedin(false)\n    updateSession({ user: { token: null } });\n    removeCookie(\"id\");\n    removeCookie(\"token\");\n\n  }\n async function register(email, username, password) {\n    let req ={\n      username:username,\n      email:email,\n\n      password:password,\n      role:\"user\",\n      name:\"\",\n      lastname:'',\n      status:\"active\",\n      photo:\"\",\n      address:\"lebanon\",\n      phone:\"0\"\n\n    }\n    console.log(req);\n  let result=  await axios.post(\"http://127.0.0.1:8000/api/register\",req) \n   \n  \n    console.log(result);\n\n    // return from the function if you have an error\n    // if (error || !token) return toast.error(error);\n  }\n\n  const context = {\n    session,\n    actions: {\n      login,\n      logout,\n      register,\n      loggedin,\n    },\n  };\n\n  return (\n    <SessionContext.Provider value={context}>\n      {children}\n    </SessionContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}