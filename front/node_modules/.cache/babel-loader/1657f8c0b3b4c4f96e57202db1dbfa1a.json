{"ast":null,"code":"var _jsxFileName = \"/home/omar/codi/final/front/src/components/session/SessionProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SessionContext from \"./SessionContext\";\nimport { setCookie, getCookie, removeCookie } from \"../../cookies\";\nimport { toast } from \"react-toastify\";\nimport { Redirect } from \"react-router\";\nimport sessionapi from '../API/sessionapi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SessionProvider({\n  children\n}) {\n  _s();\n\n  let token = getCookie(\"token\");\n  let id = getCookie(\"id\");\n  const [loggedin, setLoggedin] = useState(false);\n  const [session, setValue] = useState({\n    user: {\n      token: getCookie(\"token\"),\n      id: getCookie(\"id\")\n    }\n  });\n  useEffect(() => {\n    function initializeSession() {\n      let token = getCookie(\"token\");\n      if (token) fetch(`${sessionapi}api/user`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(res => res.json()).then(res => {\n        if (!res) {\n          return /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 22\n          }, this);\n        }\n\n        let role = res.role;\n        let user = { ...res,\n          token,\n          role\n        };\n        setLoggedin(true);\n        updateSession({\n          user\n        });\n      });\n    }\n\n    initializeSession();\n  }, [token, id]);\n\n  function updateSession(nextSession) {\n    let value = typeof nextSession === \"function\" ? nextSession : prevSession => ({ ...prevSession,\n      ...nextSession\n    });\n    setValue(value);\n  }\n\n  async function login({\n    email,\n    password\n  }) {\n    // try to login\n    let {\n      error,\n      id = 4,\n      token\n    } = await fetch(`${sessionapi}api/login`, {\n      method: \"post\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => res.json()); // return from the function if you have an error\n    // if (disabled || !token) return toast.error(disabled);\n\n    if (error || !token) return toast.error(error); // get the data of the loggedin user\n\n    setCookie(\"token\", token, 30);\n    setCookie(\"id\", id, 30);\n    let result = await fetch(`${sessionapi}api/user`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => res.json());\n    let role = result.role;\n    console.log(result);\n\n    if (!result) {\n      logout();\n    }\n\n    let user = { ...result,\n      token,\n      role\n    };\n    updateSession({\n      user\n    }); // toast(`Welcome ${user.name}!`);\n  }\n\n  function logout() {\n    removeCookie(\"id\");\n    removeCookie(\"token\");\n    updateSession({\n      user: null\n    });\n  } // async function register(email, username, password) {\n  //   let req = {\n  //     username: username,\n  //     email: email,\n  //     password: password,\n  //     role: \"user\",\n  //     name: \"\",\n  //     lastname: \"\",\n  //     status: \"active\",\n  //     address: \"lebanon\",\n  //     phone: \"0\",\n  //     photo: \"kgOrcxjkELpYSGkSj2fsvRuAqICRZm1n5FUqyc3S.png\",\n  //   };\n  //   console.log(req);\n  //   let result = await axios.post(`${sessionapi}api/uploadimage`, req);\n  //   console.log(result);\n  //   // return from the function if you have an error\n  //   // if (error || !token) return toast.error(error);\n  // }\n\n\n  const context = {\n    session,\n    actions: {\n      login,\n      logout,\n      loggedin\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n    value: context,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SessionProvider, \"gfGGraw3SepLY28cqdjr2lfSlZA=\");\n\n_c = SessionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"sources":["/home/omar/codi/final/front/src/components/session/SessionProvider.js"],"names":["React","useState","useEffect","SessionContext","setCookie","getCookie","removeCookie","toast","Redirect","sessionapi","SessionProvider","children","token","id","loggedin","setLoggedin","session","setValue","user","initializeSession","fetch","headers","Authorization","then","res","json","role","updateSession","nextSession","value","prevSession","login","email","password","error","method","body","JSON","stringify","result","console","log","logout","context","actions"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,YAA/B,QAAmD,eAAnD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;;AAEA,eAAe,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAuC;AAAA;;AACpD,MAAIC,KAAK,GAAGP,SAAS,CAAC,OAAD,CAArB;AACA,MAAIQ,EAAE,GAAGR,SAAS,CAAC,IAAD,CAAlB;AAGA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACe,OAAD,EAAUC,QAAV,IAAsBhB,QAAQ,CAAC;AACnCiB,IAAAA,IAAI,EAAE;AACJN,MAAAA,KAAK,EAAEP,SAAS,CAAC,OAAD,CADZ;AAEJQ,MAAAA,EAAE,EAAER,SAAS,CAAC,IAAD;AAFT;AAD6B,GAAD,CAApC;AAQAH,EAAAA,SAAS,CAAC,MAAM;AACd,aAASiB,iBAAT,GAA6B;AAC3B,UAAIP,KAAK,GAAGP,SAAS,CAAC,OAAD,CAArB;AAEA,UAAIO,KAAJ,EACEQ,KAAK,CAAE,GAAEX,UAAW,UAAf,EAA0B;AAC7BY,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAG,UAASV,KAAM;AADxB;AADoB,OAA1B,CAAL,CAKGW,IALH,CAKSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EALjB,EAMGF,IANH,CAMSC,GAAD,IAAS;AACb,YAAI,CAACA,GAAL,EAAU;AACR,8BAAO,QAAC,QAAD;AAAU,YAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD;;AACD,YAAIE,IAAI,GAACF,GAAG,CAACE,IAAb;AAEA,YAAIR,IAAI,GAAG,EAAE,GAAGM,GAAL;AAAUZ,UAAAA,KAAV;AAAiBc,UAAAA;AAAjB,SAAX;AACAX,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAY,QAAAA,aAAa,CAAC;AAAET,UAAAA;AAAF,SAAD,CAAb;AACD,OAfH;AAgBH;;AACDC,IAAAA,iBAAiB;AAClB,GAvBQ,EAuBN,CAACP,KAAD,EAAOC,EAAP,CAvBM,CAAT;;AAyBA,WAASc,aAAT,CAAuBC,WAAvB,EAAoC;AAClC,QAAIC,KAAK,GACP,OAAOD,WAAP,KAAuB,UAAvB,GACIA,WADJ,GAEKE,WAAD,KAAkB,EAAE,GAAGA,WAAL;AAAkB,SAAGF;AAArB,KAAlB,CAHN;AAIAX,IAAAA,QAAQ,CAACY,KAAD,CAAR;AACD;;AAED,iBAAeE,KAAf,CAAqB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAArB,EAA0C;AACxC;AACA,QAAI;AACFC,MAAAA,KADE;AACIrB,MAAAA,EAAE,GAAG,CADT;AAEFD,MAAAA;AAFE,QAGA,MAAMQ,KAAK,CAAE,GAAEX,UAAW,WAAf,EAA2B;AACxC0B,MAAAA,MAAM,EAAE,MADgC;AAExCd,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF+B;AAKxCe,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAf;AALkC,KAA3B,CAAL,CAMPV,IANO,CAMDC,GAAD,IAASA,GAAG,CAACC,IAAJ,EANP,CAHV,CAFwC,CAcxC;AACA;;AAEA,QAAIS,KAAK,IAAI,CAACtB,KAAd,EAAqB,OAAOL,KAAK,CAAC2B,KAAN,CAAYA,KAAZ,CAAP,CAjBmB,CAmBxC;;AACA9B,IAAAA,SAAS,CAAC,OAAD,EAAUQ,KAAV,EAAgB,EAAhB,CAAT;AACAR,IAAAA,SAAS,CAAC,IAAD,EAAOS,EAAP,EAAU,EAAV,CAAT;AAEA,QAAI0B,MAAM,GAAG,MAAMnB,KAAK,CAAE,GAAEX,UAAW,UAAf,EAA0B;AAChDY,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASV,KAAM;AADxB;AADuC,KAA1B,CAAL,CAIhBW,IAJgB,CAIVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAJE,CAAnB;AAKA,QAAIC,IAAI,GAAGa,MAAM,CAACb,IAAlB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,QAAI,CAACA,MAAL,EAAa;AACXG,MAAAA,MAAM;AACP;;AAED,QAAIxB,IAAI,GAAG,EAAE,GAAGqB,MAAL;AAAa3B,MAAAA,KAAb;AAAoBc,MAAAA;AAApB,KAAX;AAEAC,IAAAA,aAAa,CAAC;AAAET,MAAAA;AAAF,KAAD,CAAb,CApCwC,CAqCxC;AACD;;AAED,WAASwB,MAAT,GAAkB;AAGhBpC,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAA,IAAAA,YAAY,CAAC,OAAD,CAAZ;AACAqB,IAAAA,aAAa,CAAC;AAAET,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAb;AAGD,GA/FmD,CAgGpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;AAEA,QAAMyB,OAAO,GAAG;AACd3B,IAAAA,OADc;AAEd4B,IAAAA,OAAO,EAAE;AACPb,MAAAA,KADO;AAEPW,MAAAA,MAFO;AAIP5B,MAAAA;AAJO;AAFK,GAAhB;AAUA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE6B,OAAhC;AAAA,cACGhC;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAvIuBD,e;;KAAAA,e","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SessionContext from \"./SessionContext\";\nimport { setCookie, getCookie, removeCookie } from \"../../cookies\";\nimport { toast } from \"react-toastify\";\nimport { Redirect } from \"react-router\";\nimport sessionapi from '../API/sessionapi'\n\nexport default function SessionProvider({ children }) {\n  let token = getCookie(\"token\");\n  let id = getCookie(\"id\");\n\n\n  const [loggedin, setLoggedin] = useState(false);\n  const [session, setValue] = useState({\n    user: {\n      token: getCookie(\"token\"),\n      id: getCookie(\"id\"),\n\n    },\n  });\n\n  useEffect(() => {\n    function initializeSession() {\n      let token = getCookie(\"token\");\n\n      if (token)\n        fetch(`${sessionapi}api/user`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        })\n          .then((res) => res.json())\n          .then((res) => {\n            if (!res) {\n              return <Redirect to=\"/account\" />;\n            }\n            let role=res.role\n\n            let user = { ...res, token ,role};\n            setLoggedin(true);\n            updateSession({ user });\n          });\n    }\n    initializeSession();\n  }, [token,id]);\n\n  function updateSession(nextSession) {\n    let value =\n      typeof nextSession === \"function\"\n        ? nextSession\n        : (prevSession) => ({ ...prevSession, ...nextSession });\n    setValue(value);\n  }\n\n  async function login({ email, password }) {\n    // try to login\n    let {\n      error,id = 4,\n      token,\n    } = await fetch(`${sessionapi}api/login`, {\n      method: \"post\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    }).then((res) => res.json());\n    \n\n    // return from the function if you have an error\n    // if (disabled || !token) return toast.error(disabled);\n\n    if (error || !token) return toast.error(error);\n\n    // get the data of the loggedin user\n    setCookie(\"token\", token,30);\n    setCookie(\"id\", id,30);\n\n    let result = await fetch(`${sessionapi}api/user`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }).then((res) => res.json());\n    let role = result.role;\n    console.log(result);\n    if (!result) {\n      logout()\n    }\n\n    let user = { ...result, token, role };\n\n    updateSession({ user });\n    // toast(`Welcome ${user.name}!`);\n  }\n\n  function logout() {\n\n\n    removeCookie(\"id\");\n    removeCookie(\"token\");\n    updateSession({ user: null });\n\n\n  }\n  // async function register(email, username, password) {\n  //   let req = {\n  //     username: username,\n  //     email: email,\n  //     password: password,\n  //     role: \"user\",\n  //     name: \"\",\n  //     lastname: \"\",\n  //     status: \"active\",\n  //     address: \"lebanon\",\n  //     phone: \"0\",\n  //     photo: \"kgOrcxjkELpYSGkSj2fsvRuAqICRZm1n5FUqyc3S.png\",\n\n  //   };\n  \n  //   console.log(req);\n  //   let result = await axios.post(`${sessionapi}api/uploadimage`, req);\n\n  //   console.log(result);\n\n  //   // return from the function if you have an error\n  //   // if (error || !token) return toast.error(error);\n  // }\n\n  const context = {\n    session,\n    actions: {\n      login,\n      logout,\n      \n      loggedin,\n    },\n  };\n\n  return (\n    <SessionContext.Provider value={context}>\n      {children}\n    </SessionContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}